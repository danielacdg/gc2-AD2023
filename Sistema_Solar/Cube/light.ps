//////////////////////////
// Filename: light.ps
//////////////////////////

///////////////
//GLOBALS//////
///////////////
Texture2D shaderTexture;
Texture2D shaderTexture2;
SamplerState SampleType;
SamplerState SampleType2;

cbuffer LightBuffer{
	float4 diffuseColor;
	float3 lightDirection;
	float padding;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float2 tex2 : TEXCOORD1;
};


/////////////////////
// Pixel Shader
/////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
    float4 textureColor;
	float4 textureColor2;
	float3 lightDir;
	float lightIntensity;
	float4 color;

	//Sample the pixel color from the texture using the sampler at this texture coordinate location
	textureColor = shaderTexture.Sample(SampleType,input.tex);
	textureColor2 = shaderTexture2.Sample(SampleType,input.tex2);

	//Invert the light direction for calculations
	lightDir = -lightDirection;

	//Calculate the amount of light on this pixel
	lightIntensity = saturate(dot(input.normal,lightDir));

	//Determine the final amount of diffuse color based on the diffuse color combined with the light intensity
	color = saturate(diffuseColor * lightIntensity);

	//Multiply the texture pixel and the final diffuse color to get the final pixel color result
	//color = color * (textureColor * textureColor2);
	color = color * (textureColor);
	color = color;

	//return float4(input.normal, 1);
	return color;
}